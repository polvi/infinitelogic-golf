---
export interface Props {
	query: string;
}

const { query } = Astro.props;
---

<div id="streaming-container" data-query={query}>
	<div id="responses-container"></div>
	<button id="load-more" class="load-more-btn" style="display: none;">Load More Insights</button>
</div>

<script>
	import * as smd from "streaming-markdown";
	let lastResponse = '';
	let isFirstResponse = true;

	async function streamResponse(followUpQuery = null) {
		const container = document.getElementById('streaming-container');
		const responsesContainer = document.getElementById('responses-container');
		const loadMoreBtn = document.getElementById('load-more');
		let query = followUpQuery;
		
		if (!followUpQuery) {
			query = container?.getAttribute('data-query');
			if (!query || !container) {
				return;
			}
		}

		try {
			// Call AutoRAG streaming endpoint
			const response = await fetch('/api/stream', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({ 
					query,
					isFollowUp: !isFirstResponse,
					previousResponse: lastResponse
				}),
			});

			if (!response.ok) {
				throw new Error(`HTTP ${response.status}: ${response.statusText}`);
			}

			if (!response.body) {
				throw new Error('No response body');
			}
			// Clear loading message and create response div
			if (isFirstResponse) {
				responsesContainer.innerHTML = '';
			}
			const responseDiv = document.createElement('div');
			responseDiv.className = 'streaming-response';
			responsesContainer.appendChild(responseDiv);
			
			// Initialize markdown parser
			const renderer = smd.default_renderer(responseDiv);
			const markdownParser = smd.parser(renderer);
			
			const reader = response.body
				.pipeThrough(new TextDecoderStream())
				.getReader();
			
			let buffer = '';
			
			try {
				while (true) {
					const { done, value } = await reader.read();
					if (done) {
						if (buffer.trim()) {
							console.warn('Stream ended with unparsed data:', buffer);
						}
						smd.parser_end(markdownParser);
						break;
					}
					
					buffer += value;
					const lines = buffer.split('\n');
					buffer = lines.pop() || '';
					
					for (const line of lines) {
						if (line.startsWith('data: ')) {
							const data = line.slice(6).trim();
							if (data === '[DONE]') {
								smd.parser_end(markdownParser);
								break;
							}
							
							try {
								const jsonData = JSON.parse(data);
								if (jsonData.response) {
									smd.parser_write(markdownParser, jsonData.response);
									if (responseDiv) {
										responseDiv.scrollTop = responseDiv.scrollHeight;
									}
								}
							} catch (parseError) {
								console.warn('Error parsing JSON:', parseError, 'Data:', data);
							}
						}
					}
				}
			} finally {
				reader.releaseLock();
				if (isFirstResponse) {
					loadMoreBtn.style.display = 'block';
					isFirstResponse = false;
				}
				lastResponse = responseDiv.textContent;
			}
		} catch (error) {
			console.error('AutoRAG Streaming error:', error);
			container.innerHTML = `<div class="error">Error: ${error.message}</div>`;
		}
	}

	// Start streaming when the component loads
	streamResponse();

	// Add click handler for load more button
	document.getElementById('load-more').addEventListener('click', async () => {
		const button = document.getElementById('load-more');
		button.disabled = true;
		button.textContent = 'Loading...';
		
		try {
			await streamResponse(`Based on this previous response: "${lastResponse}", please provide new and different information about this topic. Focus on aspects that haven't been mentioned yet while staying relevant to the original query. Do not repeat any previous information.`);
		} finally {
			button.disabled = false;
			button.textContent = 'Load More Insights';
		}
	});
</script>

<style>
	.load-more-btn {
		background: #0066cc;
		color: white;
		border: none;
		padding: 10px 20px;
		border-radius: 4px;
		cursor: pointer;
		font-size: 16px;
		margin: 10px 0;
		display: block;
		margin: 20px auto;
	}

	.load-more-btn:hover {
		background: #0052a3;
	}

	.load-more-btn:disabled {
		background: #ccc;
		cursor: not-allowed;
	}
	.streaming-response {
		background: white;
		border: 1px solid #ddd;
		border-radius: 4px;
		padding: 15px;
		min-height: 100px;
		max-height: 400px;
		overflow-y: auto;
		white-space: pre-wrap;
		font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
		line-height: 1.6;
		animation: fadeIn 0.3s ease-in;
	}
	
	.loading {
		color: #666;
		font-style: italic;
		padding: 15px;
	}
	
	.error {
		color: #d32f2f;
		background: #ffebee;
		padding: 10px;
		border-radius: 4px;
	}
	
	@keyframes fadeIn {
		from { opacity: 0; }
		to { opacity: 1; }
	}
</style>
