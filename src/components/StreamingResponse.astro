---
export interface Props {
	query: string;
}

const { query } = Astro.props;

// Access the AI binding from Cloudflare runtime
const { env } = Astro.locals.runtime;

if (!env?.AI) {
	throw new Error('AI binding not available');
}

// Make the AI call - this will stream as the component resolves
const result = await env.AI.autorag("aopa-rag").aiSearch({
	query: query,
	stream: false, // Use non-streaming for now since we're using Astro's streaming
});

const response = await result.text();
---

<div class="streaming-response">
	{response}
</div>

<style>
	.streaming-response {
		background: white;
		border: 1px solid #ddd;
		border-radius: 4px;
		padding: 15px;
		min-height: 100px;
		white-space: pre-wrap;
		font-family: 'Courier New', monospace;
		animation: fadeIn 0.3s ease-in;
	}
	
	@keyframes fadeIn {
		from { opacity: 0; }
		to { opacity: 1; }
	}
</style>
